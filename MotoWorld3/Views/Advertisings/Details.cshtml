@model MotoWorld3.ViewModels.Advertisings.DetailsViewModel

@{
    ViewData["Title"] = "Details";
}

<div class="row justify-content-center pt-5">
    <div class="col-sm-12 col-md-12 col-lg-9">
        <h4 class="p-3 w-100 text-light fw-bold">
            @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.MotorcycleType.Manufacturer) - @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.MotorcycleType.Model)
        </h4>
        <div id="myCarousel" class="carousel slide bg-body-tertiary" data-bs-ride="carousel">
            <div class="carousel-indicators">
                <button type="button" data-bs-target="#myCarousel" data-bs-slide-to="0" class="active bg-light" aria-current="true" aria-label="Slide 1"></button>
                @for (var i = 1; i < Model.Pictures.Count(); i++)
                {
                    <button type="button" class="bg-light" data-bs-target="#myCarousel" data-bs-slide-to="@(i)" aria-label="Slide @(i)"></button>
                }
            </div>
            <div class="carousel-inner rounded-3">
                @foreach (var item in Model.Pictures)
                {
                    if(item == Model.Pictures.First())
                    {
                        <div class="carousel-item active">
                            <img src="data:@item.ContentType;base64,@Convert.ToBase64String(item.Data)" class="bd-placeholder-img details-img" />
                        </div>
                    }
                    else
                    {
                        <div class="carousel-item">
                            <img src="data:@item.ContentType;base64,@Convert.ToBase64String(item.Data)" class="bd-placeholder-img details-img" />
                        </div>
                    }
                }
            </div>
            <button class="carousel-control-prev" type="button" data-bs-target="#myCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#myCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>

        <div class="row mt-2 p-3 bg-light-subtle rounded-3">
            <div class="col-3">
                <p class="m-0 fw-bold text-danger">
                    <svg class="text-light bi bi-tag" xmlns="http://www.w3.org/2000/svg" width="22" height="22" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M6 4.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m-1 0a.5.5 0 1 0-1 0 .5.5 0 0 0 1 0" />
                        <path d="M2 1h4.586a1 1 0 0 1 .707.293l7 7a1 1 0 0 1 0 1.414l-4.586 4.586a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 1 6.586V2a1 1 0 0 1 1-1m0 5.586 7 7L13.586 9l-7-7H2z" />
                    </svg> @Html.DisplayFor(model => model.MotorcycleAdvertising.Advertising.Price) Ft
                </p>
            </div>            
            <div class="col text-truncate">
                <p class="m-0 text-warning">
                    <svg class="text-light bi bi-person-circle" xmlns="http://www.w3.org/2000/svg" width="22" height="22" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0" />
                        <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1" />
                    </svg> @Html.DisplayFor(model => model.MotorcycleAdvertising.Advertising.IdentityUser.Email)
                </p>
            </div>
            <div class="col">
                <p class="m-0 text-warning">
                    <svg class="text-light bi bi-telephone" xmlns="http://www.w3.org/2000/svg" width="22" height="22" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M3.654 1.328a.678.678 0 0 0-1.015-.063L1.605 2.3c-.483.484-.661 1.169-.45 1.77a17.6 17.6 0 0 0 4.168 6.608 17.6 17.6 0 0 0 6.608 4.168c.601.211 1.286.033 1.77-.45l1.034-1.034a.678.678 0 0 0-.063-1.015l-2.307-1.794a.68.68 0 0 0-.58-.122l-2.19.547a1.75 1.75 0 0 1-1.657-.459L5.482 8.062a1.75 1.75 0 0 1-.46-1.657l.548-2.19a.68.68 0 0 0-.122-.58zM1.884.511a1.745 1.745 0 0 1 2.612.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.68.68 0 0 0 .178.643l2.457 2.457a.68.68 0 0 0 .644.178l2.189-.547a1.75 1.75 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.6 18.6 0 0 1-7.01-4.42 18.6 18.6 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877z" />
                    </svg> @Html.DisplayFor(model => model.MotorcycleAdvertising.Advertising.IdentityUser.PhoneNumber)
                </p>
            </div>
        </div>
    </div>
</div>

<div class="row justify-content-center pt-3 mb-5">
    <div class="col-sm-4 col-md-4 col-lg-3">
        <dl class="pt-5">
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.MotorcycleType.Manufacturer)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.MotorcycleType.Manufacturer)
            </dd>
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.MotorcycleType.Model)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.MotorcycleType.Model)
            </dd>
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.Category)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.Category)
            </dd>
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.Condition)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.Condition)
            </dd>
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.YearOfManufacture)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.YearOfManufacture)
            </dd>
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.Fuel)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.Fuel)
            </dd>
        </dl>
    </div>

    <div class="col-sm-4 col-md-4 col-lg-3">
        <dl class="pt-5">
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.Weight)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.Weight) kg
            </dd>
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.Transmission)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.Transmission)
            </dd>
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.DriveType)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.DriveType)
            </dd>
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.Mileage)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.Mileage) km
            </dd>
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.Cooling)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.Cooling)
            </dd>
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.Power)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.Power) LE
            </dd>
        </dl>
    </div>

    <div class="col-sm-4 col col-lg-3">
        <dl class="pt-5">
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.CylinderCapacity)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.CylinderCapacity) cm<sup>3</sup>
            </dd>
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.Mixture)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.Mixture)
            </dd>
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.WorkSchedule)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.WorkSchedule)
            </dd>
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.NumberOfCylinders)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.NumberOfCylinders)
            </dd>
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.CylinderArrangement)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.CylinderArrangement)
            </dd>
            <dt class="">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Motorcycle.ValvesPerCylinders)
            </dt>
            <dd class="">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Motorcycle.ValvesPerCylinders)
            </dd>
        </dl>
    </div>
</div>

<div class="row justify-content-center mb-5">
    <div class="col-sm-12 col-md-12 col-lg-9">
        <dl>
            <dt class="p-2 text-dark bg-warning rounded">
                @Html.DisplayNameFor(model => model.MotorcycleAdvertising.Advertising.Description)
            </dt>
            <dd class="border shadow p-3 bg-body-tertiary rounded">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Advertising.Description)
            </dd>
        </dl>
    </div>
</div>

<div class="row justify-content-center pb-5">
    <div class="col-sm-12 col-md-12 col-lg-9">
        <dl>
            <dt class="p-2 text-dark bg-warning rounded">
                @Html.DisplayFor(model => model.MotorcycleAdvertising.Advertising.Place.ZipCode) @Html.DisplayFor(model => model.MotorcycleAdvertising.Advertising.Place.CityName), @Html.DisplayFor(model => model.MotorcycleAdvertising.Advertising.Place.Street) @Html.DisplayFor(model => model.MotorcycleAdvertising.Advertising.Place.HouseNumber)
            </dt>
            <dd class="border shadow p-3 bg-body-tertiary rounded">
                <div id="map" style="height: 500px;"></div>
                <script>
                    const map = L.map('map').setView([47.0, 19.0], 15);

                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '&copy; OpenStreetMap contributors'
                    }).addTo(map);

                    fetch(`/api/locations?street=@Uri.EscapeDataString(Model.MotorcycleAdvertising.Advertising.Place.Street)&cityName=@Uri.EscapeDataString(Model.MotorcycleAdvertising.Advertising.Place.CityName)&postalcode=@Uri.EscapeDataString(Model.MotorcycleAdvertising.Advertising.Place.ZipCode.ToString())&houseNumber=@Uri.EscapeDataString(Model.MotorcycleAdvertising.Advertising.Place.HouseNumber)`)
                        .then(res => res.json())
                        .then(data => {
                            data.forEach(loc => {
                                map.setView([loc.lat, loc.lon], 15);
                                L.marker([loc.lat, loc.lon]).addTo(map).bindPopup(`${loc.city}, ${loc.street} ${loc.houseNumber}`);
                            });
                        });
                </script>
            </dd>
        </dl>        
    </div>
</div>
